from gmpy2 import iroot, gcdext

N = 577080346122592746450960451960811644036616146551114466727848435471345510503600476295033089858879506008659314011731832530327234404538741244932419600335200164601269385608667547863884257092161720382751699219503255979447796158029804610763137212345011761551677964560842758022253563721669200186956359020683979540809
ct = 66888784942083126019153811303159234927089875142104191133776750131159613684832139811204509826271372659492496969532819836891353636503721323922652625216288408158698171649305982910480306402937468863367546112783793370786163668258764837887181566893024918981141432949849964495587061024927468880779183895047695332465

def decrypt(ct, p, q):
    N = p*q
    x_p = pow(ct, (p + 1) // 4, p)
    x_q = pow(ct, (q + 1) // 4, q)
    _, a, b = gcdext(p, q)
    
    x1 = (x_p*b*q + x_q*a*p) % N
    x2 = (x_p*b*q - x_q*a*p) % N
    for pt in (x1, N-x1, x2, N-x2):
        if int(bin(pt)[-8:], 2) == ord('X'):
            return pt

if __name__ == "__main__":
    r = iroot((N - 7331*1339) // 51, 4)[0]

    p =  3 * r**2 +  2 * r + 7331
    q = 17 * r**2 + 18 * r + 1339
    
    pt = decrypt(ct, p, q)
print hex(pt)
#print(bytes.fromhex(hex(pt)[2:]).decode().rstrip('X'))
