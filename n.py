import gmpy

N = 0x00bdfa9b3da7e610f3f6f41bbd3ce3d3ee53a30992777153ef834b1a42a7986db3dfdec8af9636f8a2297dc0ab6fb8715fbdbe818c7ce86bdc762290064b83e4aee9b524ba708ead4cb233f1f9201432a71bf30da3b10392ece0e08926ce699054f42dc4ea7f709cc311d8594add622241909169e4b4d91cfe044da27d7a191f5ecf40150109b6a9bc95febc8074c1397cfb24c52d304fafa91eec31e2e308e815e0560995e4747724a5609e8b6fdbb0d7ee7a34f970c941b8a0cf020932938b5868c491b55b460ad4f812960a12bf03e5bdbcce9a676f45d7461d6d8d06330064799f9364dbeec497b74ec8e5dd6e53ba019b6b43b22b3a60a93eb8a8dd54ab44e0c7632fcb4d50538e4f7c4d6668fe7dc9b4c4aae79515e2ff29cf1ceb5419ca4bb423635fadadb47f697c0af7b90a77ba521e8bad77f86904b6ffce6c36f20300d0a28c09af76196bbf2397551a55a5c9fe3948c20e51c93a7c5ce80dbcb05eccd2b97ba0a041575185163ecf71441ddb63405d0c4f0a83346561e3fb1a092567c58fcaedccb778cefc6f7552543a8387f2f1196403532ca66b83f52b80e80539e50577679afc3a335630e1cabc39281c76c24c5454250c5c07ef5f73eab1e28d6280224eee03b0bbbcd0ea47dc865c9cfab4802c86f5dcd8c4f071eb2409250b60f24bd37cea4a80d19e3dec43de1f14d5007496639ffac840a2ea94378eaecb4a8a6b03c292c3ee0e19138b2574e85c0382f7c7efd5b47f2c6b9657861d313d6544bca503873859659938c18f99691e6acceb759fdce5ffa1c0a71e05853adcf09afd6bdc886e1e085ab8a5453addb52f90b1bb213f24ea76af2598518bac0c323b60ad676d19a2af8a6c0dede6633b07ec8e52eaa8249dc7b6dc01cb82ca80096abf47bc95a2c3bec05f0c9be12de2fcf40020aba65357879856af4d6e1640541662b790f2dd2f5afe315f287e5d59a56ab01336a316495e7bf549e699b5366f4a1acd442f1802275e9ffc97bdc101ee0a163e05a74437d2e001ec15fc7b4e69a2bbd5518ed36cf75a436bff19508b203555e8c18cedbda77f496dfc2c3e5bd137fd4cd6f0004427fe73955486bafcb49c26259dac26cdcc99c89b6148dc2d99ee2d101b08b8ded1d27d3500c5e983b1744c441664199b5667530533d427fd2f9fa5180ef73832fec70fd9143f23dfd44c38e4978541e7bab69e13bb3d6686761c34cdec22a85b5c9cc52dfb779e0aed8bfacfc260c4cdc2e33357c6f31ef50b39c8ba91726e52f703c9a794501d247619eeab7067763ed22d9aa801353310d004de3f6bb41310c6d08264e08c9b88fe19418fc6567d2f95d2b194a06da73b30b95baf01f8625df802ce45e452afd79166405dd7ad7705d2277dc1ecc57bb393ccdeea9dc44b6a243e13f66422bbdc0f3e798b4d88ccf575a65461d7c219
e = 0x3

msg = 0x422b3364465941554f4c66744d486b6b367461667350774a6570312b54476253694d63782f427a6a61442b4e6769682b687056697943702f4348473564627a6855317a353631793037712f31744e7576324530334c64676e39764269686e366b75522b546a42435758734462365566426375535474474b4b5a69397850504230395a48384d33674d7475694c4e61725958704a326d48303646634171395531506b6f33693476582b4230696652574e467458712f4d41586f6e6368505872784179363965734136464932717549716e525a5672474e6a37426171694f32736e43734130634c69325431776965572b3368585674396b623463537a5443397a6e36466e776b7961725751356a42384c65532b41366d4d3437476b546b6941316254796b6a36586d5442315273626c3958796365566e623030524332694c344f74756c6c4145796e4a7a334835614542436670524550594a535056654963704b4254434b443536327a58393163466976352b3573465574524130526646714139316c7031436e2b4d694b756d473378396a5254505653466e636671497271315366344848766f3878304c35452f6e44642b66305774586f79634e5268584f345736474732696a2b2b3034543465643351786c624b63345175616a66667a6b6b6d2b77486b7952334834664b746f614f316a397679666c4f7553416b71433279392b784644773872486d455364495761326f376d4b37415171774c4a434c576f576165302b38644f6c336b642f474b4d556a736343545151704c44306b557a7832773057757866616a735239437258336d53436448445951366a634266396e7a712f72354f746259664b4a436146434867594441424e6c


d = 809449863705350640766624294764805522892977225063232286267016390662801735546564959258569628625325805163267038248336813627989857126187507008233087984752871856338482604655661917888524129125762392484855022069777185879863470836061311272095328652915900210624861597368288396317765046884829690244550786463304479703203156303319744000069167801066200714152368090860684769761406050276182608160188247078529947168847416483197114643769971695780086607005803780885458906167959848175400674932978736295098497746992607200263371851362424505195300032424119383435906015649419819203395310726266266631149332857171480695582411566156141835544111178128812671025464064327045148928782652110507290592726550578380561558365021850284289900090196039426587772994105946501221033519828836944460037868220412020094340919116678151965195736304248934650130803840689917941113033797972755783851119159039941782437566046303923971315190608336608112661176627038830305956826544768626306264770006776878439533304443861307643301186126016682841433789346830523580672275683805658430985481607821621772244737957330544662519534688544599763161653119753213963697672737759554533062001577137639287902901229761729394566201109327489870382402760127042634806929696809580276290857994376139548852252528617766448017535538881045572616011179362821691435543713133450392232189389409864491766499166364017811544547364477764978632567465213314858859937113559806601004134290261259573230710487490436150882847051287582170659393306421907076137460791431565143820191187301306542366348049707517052567521698351666465920295662321392122890313645788690175559397818304842184044898133933266562647097664951864679405582228097649097801670344875911712885579292219299191687470611081460705944044227311955025457961027324988699484235111377661441953259954973939999465622365536156485819753729707714653185436451460033454964248131817505617407147129357512644324126582020731450932835496908810546427818330587009425364077621690796385555587130072178594471312666171743303885762821119653034238304251995248095311595594292303200342531303869338839766736982228842030948421798591800611623692625352891907883314475115558655570608681960385759859041038889075054532817572860472559863876572854371077427164080585414931596387677005461560958334047256986060807767033548531735838813122529626506233959844007815007974400337945864879125655486957864954485139444067410364154678224100013742191275893331719082263795746245401804413357279043129352194271771207235730291685311645004039022990644961853977/3

print d
T =  (msg**d/3) % N
print T
print T.encode('hex')
#def wiener_attack(N,e):
#    (p,q,d) = (0,0,0)
#    conv=convergents(partial_quotiens(e,N))
#    for frac in conv:
#        (k,d)=frac
#        if k == 0:
#            continue
#        y = -(N - phiN(e, d, k) + 1)
#        discr = y*y - 4*N
#        if(discr>=0):
#            # we need a perfect squared discriminant
#            sqr_discr = is_perfect_square(discr)
#            # test if discr is positive and the roots are integers
#            if sqr_discr!=-1 and (-y+sqr_discr)%2==0:
#                p = ((-y+sqr_discr)/2)
#                q = ((-y-sqr_discr)/2)
#                return p, q, d
#    return p, q, d
#wiener_attack(N, e)

#gs = gmpy.mpz(msg)
#gm = gmpy.mpz(n)
#g3 = gmpy.mpz(3)


#mask = gmpy.mpz(0x8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808000)
#test = 0
#while True: 
#	if test == 0:
#   		gs = gs
#	else:
#  		gs += gm
# 	root,exact = gs.root(g3)
# 	if (root & mask).bit_length() < 8:
#    		print root
#    		break

#print '\n',hex(int(root))[2:-1].decode('hex')
